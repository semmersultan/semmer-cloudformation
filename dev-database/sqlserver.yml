Description: >
 Dev PayCorp MySQL Server RDS Database Stack

Parameters:
  Environment:
    Type: String

  VpcID:
    Type: String

  VpcCIDR:
    Type: String

  InternalZone:
    Type: String

  ExternalZone:
    Type: String
   
  DBName:
    Type: String
    NoEcho: true

  DBUsername:
    Type: String
    NoEcho: true

  DBPassword:
    Type: String
    NoEcho: true

  DBInstanceType:
    Type: String
    Default: db.t2.medium

  DBStorageSize:
    Type: String
    Default: "200"

  BackupRetention:
    Type: String
    Default: "1"

Resources:

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      #VpcId: !Ref VpcID
      SecurityGroupIngress:
      - IpProtocol: TCP
        ToPort: 3306
        FromPort: 3306
        CidrIp: 203.34.100.2/32
      - IpProtocol: TCP
        ToPort: 3306
        FromPort: 3306
        CidrIp: 210.10.223.250/32
      - IpProtocol: TCP
        ToPort: 3306
        FromPort: 3306
        CidrIp: 49.255.235.123/32
      - IpProtocol: TCP
        ToPort: 3306
        FromPort: 3306
        CidrIp: !Ref VpcCIDR
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}"

  SqlServerDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.small
      Engine: MySQL
      EngineVersion: 5.6.19
      MasterUsername: !Ref 'DBUsername'
      MasterUserPassword: !Ref 'DBPassword'
      DBParameterGroupName: !Ref 'MyRDSParamGroup'

  MyRDSParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: MySQL5.6
      Description: CloudFormation Sample Database Parameter Group
      Parameters:
        autocommit: '1'
        general_log: '1'
        old_passwords: '0'

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      SubnetIds: !Ref SubnetID
      DBSubnetGroupDescription: !Sub "${Environment} Subnets"


  DBMonitoringRole:
    Type: AWS::IAM::Role
    Condition: ProdConfig
    Properties:
      Path: /database/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - monitoring.rds.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: create-rds-log-group
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:PutRetentionPolicy
            Resource:
            - arn:aws:logs:*:*:log-group:RDS*
      - PolicyName: create-rds-log-streams
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            - logs:GetLogEvents
            Resource:
            - arn:aws:logs:*:*:log-group:RDS*

  DBCPUUtilization:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: CPUUtilization
      AlarmDescription: !Sub "${AWS::StackName} - CPU Utilization"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: '1'
      Namespace: AWS/RDS
      Statistic: Average
      Period: '300'
      Threshold: '80'
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: !Ref SqlServerDB

  DBFreeStorageSpace:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: FreeStorageSpace
      AlarmDescription: !Sub "${AWS::StackName} - Free Space"
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: '1'
      Namespace: AWS/RDS
      Statistic: Average
      Period: '300'
      Threshold: '10000000000'
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: !Ref SqlServerDB

  DBDiskQueueDepth:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: DiskQueueDepth
      AlarmDescription: !Sub "${AWS::StackName} - Queue Depth"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: '1'
      Namespace: AWS/RDS
      Statistic: Average
      Period: '300'
      Threshold: '10'
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: !Ref SqlServerDB

  DBReadLatency:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: ReadLatency
      AlarmDescription: !Sub "${AWS::StackName} - Read Latency"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: !Ref SqlServerDB
      EvaluationPeriods: '1'
      Namespace: AWS/RDS
      Statistic: Average
      Period: '300'
      Threshold: '0.1'

  DBWriteLatency:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: WriteLatency
      AlarmDescription: !Sub "${AWS::StackName} - Write Latency"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: '1'
      Namespace: AWS/RDS
      Statistic: Average
      Period: '300'
      Threshold: '0.1'
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: !Ref SqlServerDB

  DBDatabaseConnections:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: DatabaseConnections
      AlarmDescription: !Sub "${AWS::StackName} - Connections"
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: '5'
      Namespace: AWS/RDS
      Statistic: Average
      Period: '60'
      Threshold: '50'
      Dimensions:
      - Name: DBInstanceIdentifier
        Value: !Ref SqlServerDB

  DBExtRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref ExternalZone
      Name: !Join [ ".", [ !Sub "${Environment}-mssql" , !Ref ExternalZone ] ]
      Type: CNAME
      Comment: !Sub "Alias record for ${AWS::StackName} SqlServer DB"
      TTL: '900'
      ResourceRecords:
      - !GetAtt [ SqlServerDB, Endpoint.Address ]

  DBIntRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref InternalZone
      Name: !Join [ ".", [ !Sub "${Environment}-mssql" , !Ref InternalZone ] ]
      Type: CNAME
      Comment: !Sub "Alias record for ${AWS::StackName} SqlServer DB"
      TTL: '900'
      ResourceRecords:
      - !GetAtt [ SqlServerDB, Endpoint.Address ]

